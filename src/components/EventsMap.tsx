import React, { useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import { Event } from '../types';

interface EventsMapProps {
  events: Event[];
}

const EventsMap: React.FC<EventsMapProps> = ({ events }) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [, setMap] = useState<L.Map | null>(null);

  // –¶–µ–Ω—Ç—Ä –°–∞—Ä–∞—Ç–æ–≤–∞
  const saratovCenter: [number, number] = [51.533562, 46.034266];

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–±—ã—Ç–∏–π
  const createEventIcon = (category: string) => {
    const icons: { [key: string]: { emoji: string; color: string } } = {
      culture: { emoji: 'üé≠', color: '#9b59b6' },
      food: { emoji: 'üçΩÔ∏è', color: '#e74c3c' },
      entertainment: { emoji: 'üéâ', color: '#f39c12' },
      sport: { emoji: 'üèÉ', color: '#27ae60' },
      education: { emoji: 'üìö', color: '#3498db' }
    };

    const iconData = icons[category] || { emoji: 'üìÖ', color: '#95a5a6' };

    return L.divIcon({
      html: `
        <div style="
          background: ${iconData.color};
          color: white;
          border-radius: 50%;
          width: 40px;
          height: 40px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 18px;
          border: 3px solid white;
          box-shadow: 0 2px 10px rgba(0,0,0,0.3);
          animation: pulse 2s infinite;
        ">
          ${iconData.emoji}
        </div>
        <style>
          @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
          }
        </style>
      `,
      className: 'custom-event-icon',
      iconSize: [40, 40],
      iconAnchor: [20, 40],
      popupAnchor: [0, -40]
    });
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredEvents = selectedCategory === 'all' 
    ? events.filter(e => e.isActive)
    : events.filter(e => e.isActive && e.category === selectedCategory);

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatPrice = (price?: number) => {
    if (price === undefined || price === null) return '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è';
    return price === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${price} ‚ÇΩ`;
  };

  const getEventStatus = (event: Event) => {
    const now = new Date();
    if (now < event.startDate) {
      return { status: 'upcoming', text: '–°–∫–æ—Ä–æ', color: '#3498db' };
    } else if (now >= event.startDate && now <= event.endDate) {
      return { status: 'ongoing', text: '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å', color: '#27ae60' };
    } else {
      return { status: 'ended', text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', color: '#95a5a6' };
    }
  };

  const categories = [
    { id: 'all', name: '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', icon: 'üìÖ' },
    { id: 'culture', name: '–ö—É–ª—å—Ç—É—Ä–∞', icon: 'üé≠' },
    { id: 'food', name: '–ï–¥–∞', icon: 'üçΩÔ∏è' },
    { id: 'entertainment', name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üéâ' },
    { id: 'sport', name: '–°–ø–æ—Ä—Ç', icon: 'üèÉ' },
    { id: 'education', name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üìö' }
  ];

  return (
    <div className="events-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="events-header">
        <div className="header-content">
          <h2 className="events-title">üé™ –°–æ–±—ã—Ç–∏—è –°–∞—Ä–∞—Ç–æ–≤–∞</h2>
          <p className="events-subtitle">
            –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≥–æ—Ä–æ–¥–∞
          </p>
        </div>
        <div className="events-stats">
          <div className="stat-item">
            <span className="stat-number">{events.filter(e => e.isActive).length}</span>
            <span className="stat-label">–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{events.filter(e => e.isActive && getEventStatus(e).status === 'ongoing').length}</span>
            <span className="stat-label">–ò–¥—É—Ç —Å–µ–π—á–∞—Å</span>
          </div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="category-filters">
        <div className="filters-header">
          <h3>üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
          <span className="active-filter-count">
            {selectedCategory === 'all' ? '–í—Å–µ' : categories.find(c => c.id === selectedCategory)?.name}
          </span>
        </div>
        <div className="filters-grid">
          {categories.map(category => {
            const count = category.id === 'all' 
              ? events.filter(e => e.isActive).length
              : events.filter(e => e.isActive && e.category === category.id).length;
            
            return (
              <button
                key={category.id}
                className={`category-filter ${selectedCategory === category.id ? 'active' : ''}`}
                onClick={() => setSelectedCategory(category.id)}
              >
                <div className="filter-icon">{category.icon}</div>
                <div className="filter-content">
                  <span className="filter-name">{category.name}</span>
                  <span className="filter-count">{count}</span>
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–∞ */}
      <div className="events-map">
        <MapContainer
          center={saratovCenter}
          zoom={13}
          style={{ height: '500px', width: '100%' }}
          ref={setMap}
        >
          <TileLayer
            attribution='&copy; <a href="https://carto.com/attributions">CARTO</a>'
            url="https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png"
            subdomains="abcd"
            maxZoom={19}
          />
          
          {filteredEvents.map((event) => {
            const eventStatus = getEventStatus(event);
            
            return (
              <Marker
                key={event.id}
                position={event.location.coordinates}
                icon={createEventIcon(event.category)}
              >
                <Popup maxWidth={350}>
                  <div className="event-popup">
                    <div className="event-popup-header">
                      <h3>{event.title}</h3>
                      <span 
                        className="event-status" 
                        style={{ backgroundColor: eventStatus.color }}
                      >
                        {eventStatus.text}
                      </span>
                    </div>
                    
                    <div className="event-popup-info">
                      <p><strong>üìç –ú–µ—Å—Ç–æ:</strong> {event.location.name}</p>
                      <p><strong>üìÖ –ù–∞—á–∞–ª–æ:</strong> {formatDate(event.startDate)}</p>
                      <p><strong>‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ:</strong> {formatDate(event.endDate)}</p>
                      <p><strong>üé´ –¶–µ–Ω–∞:</strong> {formatPrice(event.price)}</p>
                      <p><strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> {event.currentParticipants}/{event.maxParticipants || '‚àû'}</p>
                      <p><strong>üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</strong> {event.organizer}</p>
                    </div>
                    
                    <div className="event-popup-description">
                      <p>{event.description}</p>
                    </div>
                    
                    <div className="event-popup-actions">
                      <button className="participate-btn">
                        –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                      </button>
                      <button className="share-btn">
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                      </button>
                    </div>
                  </div>
                </Popup>
              </Marker>
            );
          })}
        </MapContainer>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
      <div className="events-list">
        <h3>üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π</h3>
        <div className="events-grid">
          {filteredEvents.map(event => {
            const eventStatus = getEventStatus(event);
            
            return (
              <div key={event.id} className="event-card">
                <div className="event-card-header">
                  <div className="event-category">
                    {categories.find(c => c.id === event.category)?.icon}
                  </div>
                  <span 
                    className="event-status-badge" 
                    style={{ backgroundColor: eventStatus.color }}
                  >
                    {eventStatus.text}
                  </span>
                </div>
                
                <h4>{event.title}</h4>
                <p className="event-location">üìç {event.location.name}</p>
                <p className="event-date">üìÖ {formatDate(event.startDate)}</p>
                <p className="event-price">üé´ {formatPrice(event.price)}</p>
                
                <div className="event-participants">
                  <div className="participants-bar">
                    <div 
                      className="participants-fill"
                      style={{
                        width: event.maxParticipants 
                          ? `${(event.currentParticipants / event.maxParticipants) * 100}%`
                          : '0%'
                      }}
                    ></div>
                  </div>
                  <span className="participants-text">
                    {event.currentParticipants}/{event.maxParticipants || '‚àû'} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                  </span>
                </div>
                
                <div className="event-card-actions">
                  <button className="btn-primary">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                  <button className="btn-secondary">–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</button>
                </div>
              </div>
            );
          })}
        </div>
        
        {filteredEvents.length === 0 && (
          <div className="no-events">
            <p>–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default EventsMap;
