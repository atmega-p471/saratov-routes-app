import React, { useState, useRef, useCallback } from 'react';
import { CollectionItem, UserStats, Achievement } from '../types';

interface QRScannerProps {
  userStats: UserStats;
  onStatsUpdate: (stats: UserStats) => void;
  collection: CollectionItem[];
  onCollectionUpdate: (collection: CollectionItem[]) => void;
  places: any[];
  showCollection: boolean;
  onCollectionToggle: (show: boolean) => void;
}

const QRScanner: React.FC<QRScannerProps> = ({
  userStats,
  onStatsUpdate,
  collection,
  onCollectionUpdate,
  places,
  showCollection,
  onCollectionToggle
}) => {
  const [isScanning, setIsScanning] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // –°–∏–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π QR-—Å–∫–∞–Ω–µ—Ä)
  const simulateScan = useCallback(() => {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const randomPlace = places[Math.floor(Math.random() * places.length)];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –º–µ—Å—Ç–æ
    if (collection.find(item => item.placeId === randomPlace.id)) {
      alert('–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const newItem: CollectionItem = {
      id: `${randomPlace.id}-${Date.now()}`,
      placeId: randomPlace.id,
      name: randomPlace.name,
      category: randomPlace.category,
      scannedAt: new Date()
    };

    const newCollection = [...collection, newItem];
    onCollectionUpdate(newCollection);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const newStats = { ...userStats };
    newStats.totalScanned += 1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const updatedAchievements = [...newStats.achievements];
    
    // –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const firstScanAchievement = updatedAchievements.find(a => a.id === 'first-scan');
    if (firstScanAchievement && !firstScanAchievement.unlockedAt) {
      firstScanAchievement.progress = 1;
      firstScanAchievement.unlockedAt = new Date();
    }

    // –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Å—Ç–∞
    const cultureCount = newCollection.filter(item => {
      const place = places.find(p => p.id === item.placeId);
      return place?.category === 'culture';
    }).length;
    
    const cultureAchievement = updatedAchievements.find(a => a.id === 'culture-lover');
    if (cultureAchievement) {
      cultureAchievement.progress = cultureCount;
      if (cultureCount >= 5 && !cultureAchievement.unlockedAt) {
        cultureAchievement.unlockedAt = new Date();
      }
    }

    // –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞
    const gastroCount = newCollection.filter(item => {
      const place = places.find(p => p.id === item.placeId);
      return place?.category === 'gastronomy';
    }).length;
    
    const gastroAchievement = updatedAchievements.find(a => a.id === 'gastronomy-expert');
    if (gastroAchievement) {
      gastroAchievement.progress = gastroCount;
      if (gastroCount >= 10 && !gastroAchievement.unlockedAt) {
        gastroAchievement.unlockedAt = new Date();
      }
    }

    newStats.achievements = updatedAchievements;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—É–ø–æ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const newCoupons = [...newStats.coupons];
    
    // –ö—É–ø–æ–Ω –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (newStats.totalScanned === 1) {
      newCoupons.push({
        id: `coupon-first-${Date.now()}`,
        businessName: '–ö–æ—Ñ–µ–π–Ω—è "–í–æ–ª–∂—Å–∫–∏–µ –∑–µ—Ä–Ω–∞"',
        discount: 10,
        description: '–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–æ—Ñ–µ',
        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
        qrCode: 'FIRST_SCAN_BONUS',
        isUsed: false
      });
    }

    // –ö—É–ø–æ–Ω –∑–∞ –∫–∞–∂–¥—ã–µ 5 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if (newStats.totalScanned % 5 === 0) {
      const restaurants = ['–†–µ—Å—Ç–æ—Ä–∞–Ω "–ü—É—à–∫–∏–Ω—ä"', '–ö–∞—Ñ–µ "–°–∞—Ä–∞—Ç–æ–≤"', '–ü–∏—Ü—Ü–µ—Ä–∏—è "–í–æ–ª–≥–∞"'];
      const randomRestaurant = restaurants[Math.floor(Math.random() * restaurants.length)];
      
      newCoupons.push({
        id: `coupon-5scans-${Date.now()}`,
        businessName: randomRestaurant,
        discount: 15,
        description: '–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ',
        validUntil: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 –¥–Ω–µ–π
        qrCode: `SCAN5_${newStats.totalScanned}`,
        isUsed: false
      });
    }

    newStats.coupons = newCoupons;
    onStatsUpdate(newStats);

    alert(`üéâ –ú–µ—Å—Ç–æ "${randomPlace.name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!`);
    setIsScanning(false);
  }, [collection, onCollectionUpdate, userStats, onStatsUpdate, places]);

  const startScanning = async () => {
    setIsScanning(true);
    
    // –í –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      simulateScan();
    }, 2000);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã:
    /*
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'environment' } 
      });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.play();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
      setIsScanning(false);
    }
    */
  };

  const stopScanning = () => {
    setIsScanning(false);
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
    /*
    if (videoRef.current?.srcObject) {
      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();
      tracks.forEach(track => track.stop());
    }
    */
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const scanner = document.querySelector('.qr-scanner');
    if (scanner) {
      scanner.classList.remove('mobile-active');
    }
  };

  const getAchievementProgress = (achievement: Achievement) => {
    return Math.round((achievement.progress / achievement.maxProgress) * 100);
  };

  return (
    <>
      {/* QR Scanner Modal */}
      <div className={`qr-scanner ${isScanning ? 'active' : ''}`}>
        <div className="scanner-content">
          <h2 className="scanner-title">üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞</h2>
          <p className="scanner-description">
            –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ —Ä—è–¥–æ–º —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
          </p>
          
          {isScanning ? (
            <div style={{ textAlign: 'center', margin: '20px 0' }}>
              <div className="loading-spinner"></div>
              <p style={{ marginTop: '16px', color: '#cbd5e1' }}>
                –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏...
              </p>
            </div>
          ) : null}
          
          <div style={{ display: 'flex', gap: '12px', justifyContent: 'center' }}>
            <button className="scanner-btn" onClick={simulateScan}>
              üéØ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            </button>
            <button className="scanner-btn cancel" onClick={stopScanning}>
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </div>

      {/* Collection Panel */}
      <div 
        className="collection-panel"
        style={{ display: showCollection ? 'block' : 'none' }}
      >
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          marginBottom: '15px' 
        }}>
          <h3>üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏—è</h3>
          <button 
            onClick={() => onCollectionToggle(false)}
            style={{ 
              background: 'none', 
              border: 'none', 
              fontSize: '1.2rem',
              cursor: 'pointer' 
            }}
          >
            √ó
          </button>
        </div>

        <div style={{ marginBottom: '15px', fontSize: '0.9rem' }}>
          üìä –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {userStats.totalScanned} –º–µ—Å—Ç
        </div>

        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ */}
        <div style={{ marginBottom: '15px' }}>
          <h4 style={{ fontSize: '0.9rem', marginBottom: '10px' }}>üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ:</h4>
          {collection.slice(-3).reverse().map(item => (
            <div key={item.id} className="collection-item">
              <span style={{ fontSize: '1.2rem' }}>
                {item.category === 'gastronomy' ? 'üçΩÔ∏è' :
                 item.category === 'culture' ? 'üé≠' :
                 item.category === 'attractions' ? 'üèõÔ∏è' : 'üå≥'}
              </span>
              <div>
                <div style={{ fontWeight: '500', fontSize: '0.8rem' }}>
                  {item.name}
                </div>
                <div style={{ fontSize: '0.7rem', color: '#666' }}>
                  {item.scannedAt.toLocaleDateString()}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        <div style={{ marginBottom: '15px' }}>
          <h4 style={{ fontSize: '0.9rem', marginBottom: '10px' }}>üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h4>
          {userStats.achievements.slice(0, 3).map(achievement => (
            <div 
              key={achievement.id} 
              style={{ 
                marginBottom: '8px',
                padding: '8px',
                background: achievement.unlockedAt ? '#d4edda' : '#f8f9fa',
                borderRadius: '5px',
                fontSize: '0.8rem'
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
                <span>{achievement.icon}</span>
                <span style={{ fontWeight: '500' }}>{achievement.name}</span>
                {achievement.unlockedAt && <span>‚úÖ</span>}
              </div>
              <div style={{ fontSize: '0.7rem', color: '#666', marginTop: '2px' }}>
                {achievement.progress}/{achievement.maxProgress} ({getAchievementProgress(achievement)}%)
              </div>
            </div>
          ))}
        </div>

        {/* –ö—É–ø–æ–Ω—ã */}
        {userStats.coupons.filter(c => !c.isUsed).length > 0 && (
          <div>
            <h4 style={{ fontSize: '0.9rem', marginBottom: '10px' }}>üéüÔ∏è –ö—É–ø–æ–Ω—ã:</h4>
            {userStats.coupons.filter(c => !c.isUsed).slice(0, 2).map(coupon => (
              <div 
                key={coupon.id}
                style={{
                  padding: '10px',
                  background: 'linear-gradient(135deg, #ff6b6b, #feca57)',
                  color: 'white',
                  borderRadius: '8px',
                  marginBottom: '8px',
                  fontSize: '0.8rem'
                }}
              >
                <div style={{ fontWeight: '500' }}>{coupon.businessName}</div>
                <div>{coupon.description}</div>
                <div style={{ fontSize: '0.7rem', opacity: 0.9 }}>
                  –î–æ {coupon.validUntil.toLocaleDateString()}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>


      {/* Scanning Modal */}
      {isScanning && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 2000
        }}>
          <div style={{
            background: 'white',
            borderRadius: '15px',
            padding: '30px',
            textAlign: 'center',
            maxWidth: '400px',
            width: '90%'
          }}>
            <h3>üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞</h3>
            <div style={{
              width: '200px',
              height: '200px',
              border: '3px dashed #667eea',
              borderRadius: '10px',
              margin: '20px auto',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              background: '#f8f9fa'
            }}>
              <div style={{ animation: 'pulse 2s infinite' }}>
                üì∑ –ü–æ–∏—Å–∫ QR-–∫–æ–¥–∞...
              </div>
            </div>
            <p style={{ marginBottom: '20px', color: '#666' }}>
              –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ —Ä—è–¥–æ–º —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            </p>
            <button
              onClick={stopScanning}
              style={{
                background: '#e74c3c',
                color: 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                cursor: 'pointer'
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      )}

      {/* Hidden video element for camera (would be used in real implementation) */}
      <video ref={videoRef} style={{ display: 'none' }} />
      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </>
  );
};

export default QRScanner;
