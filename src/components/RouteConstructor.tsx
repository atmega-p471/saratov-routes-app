import React from 'react';
import { useDrop } from 'react-dnd';
import { Tag } from '../types';
import DragDropTag from './DragDropTag';

interface RouteConstructorProps {
  selectedTags: Tag[];
  onTagsChange: (tags: Tag[]) => void;
  onGenerateRoute: () => void;
  allTags: Tag[];
}

const RouteConstructor: React.FC<RouteConstructorProps> = ({
  selectedTags,
  onTagsChange,
  onGenerateRoute,
  allTags
}) => {
  const [{ isOver }, drop] = useDrop(() => ({
    accept: 'tag',
    drop: (item: Tag) => {
      if (!selectedTags.find(t => t.id === item.id)) {
        onTagsChange([...selectedTags, item]);
      }
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
    }),
  }));

  const handleTagClick = (tag: Tag) => {
    if (selectedTags.find(t => t.id === tag.id)) {
      onTagsChange(selectedTags.filter(t => t.id !== tag.id));
    } else {
      onTagsChange([...selectedTags, tag]);
    }
  };

  const removeTag = (tagId: string) => {
    onTagsChange(selectedTags.filter(t => t.id !== tagId));
  };

  const tagsByCategory = {
    personalities: allTags.filter(t => t.category === 'personalities'),
    themes: allTags.filter(t => t.category === 'themes'),
    formats: allTags.filter(t => t.category === 'formats'),
  };

  return (
    <div className="card route-constructor">
      <h2 className="section-title">üéØ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤</h2>
      
      <div className="tags-section">
        <div className="tags-category">
          <h3 className="category-title">üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∏</h3>
          <div className="tags-grid">
            {tagsByCategory.personalities.map(tag => (
              <DragDropTag
                key={tag.id}
                tag={tag}
                isSelected={selectedTags.some(t => t.id === tag.id)}
                onClick={handleTagClick}
              />
            ))}
          </div>
        </div>

        <div className="tags-category">
          <h3 className="category-title">üé® –¢–µ–º—ã</h3>
          <div className="tags-grid">
            {tagsByCategory.themes.map(tag => (
              <DragDropTag
                key={tag.id}
                tag={tag}
                isSelected={selectedTags.some(t => t.id === tag.id)}
                onClick={handleTagClick}
              />
            ))}
          </div>
        </div>

        <div className="tags-category">
          <h3 className="category-title">‚ö° –§–æ—Ä–º–∞—Ç</h3>
          <div className="tags-grid">
            {tagsByCategory.formats.map(tag => (
              <DragDropTag
                key={tag.id}
                tag={tag}
                isSelected={selectedTags.some(t => t.id === tag.id)}
                onClick={handleTagClick}
              />
            ))}
          </div>
        </div>
      </div>

      <div
        ref={drop}
        className={`drop-zone ${isOver ? 'active' : ''}`}
      >
        {selectedTags.length === 0 ? (
          <div>
            <p>üéØ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ç–µ–≥–∏ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∏—Ö</p>
            <p style={{ fontSize: '0.9rem', opacity: 0.7, marginTop: '10px' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –º–µ—Å—Ç–∞ –∏ —Ç–µ–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            </p>
          </div>
        ) : (
          <div>
            <p>‚ú® –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</p>
            <div className="selected-tags">
              {selectedTags.map(tag => (
                <div
                  key={tag.id}
                  className="tag selected"
                  onClick={() => removeTag(tag.id)}
                  style={{ cursor: 'pointer' }}
                  title="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å"
                >
                  <span>{tag.icon}</span>
                  <span>{tag.name}</span>
                  <span>√ó</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      <button
        className="generate-btn"
        onClick={onGenerateRoute}
        disabled={selectedTags.length === 0}
      >
        üó∫Ô∏è –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
      </button>

      {selectedTags.length > 0 && (
        <div style={{ marginTop: '15px', fontSize: '0.9rem', color: '#666' }}>
          üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä–µ—Ç –º–µ—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º,
          –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        </div>
      )}
    </div>
  );
};

export default RouteConstructor;
