import React, { useState, useEffect } from 'react';
import { UserStats, CollectionItem, Quest, UserLevel, LeaderboardEntry } from '../types';

interface PersonalCabinetProps {
  userStats: UserStats;
  collection: CollectionItem[];
  userLevel: UserLevel;
  completedQuests: Quest[];
  activeQuests?: Quest[];
  leaderboard: LeaderboardEntry[];
  userId: string;
  initialActiveTab?: 'profile' | 'collection' | 'quests' | 'leaderboard' | 'settings';
}

const PersonalCabinet: React.FC<PersonalCabinetProps> = ({
  userStats,
  collection,
  userLevel,
  completedQuests,
  activeQuests = [],
  leaderboard,
  userId,
  initialActiveTab = 'profile'
}) => {
  const [activeSubTab, setActiveSubTab] = useState<'profile' | 'collection' | 'quests' | 'leaderboard' | 'settings'>(initialActiveTab);
  const [achievementsExpanded, setAchievementsExpanded] = useState<boolean>(false);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–∞
  useEffect(() => {
    setActiveSubTab(initialActiveTab);
  }, [initialActiveTab]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏–∑ localStorage –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [currentTheme, setCurrentTheme] = useState<'light' | 'dark'>(() => {
    const savedTheme = localStorage.getItem('saratov-theme') as 'light' | 'dark';
    return savedTheme || 'light';
  });

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    document.documentElement.setAttribute('data-theme', currentTheme);
  }, [currentTheme]);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  const handleThemeChange = (theme: 'light' | 'dark') => {
    setCurrentTheme(theme);
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('saratov-theme', theme);
  };

  const getUserRank = () => {
    const userIndex = leaderboard.findIndex(entry => entry.userId === userId);
    return userIndex !== -1 ? userIndex + 1 : null;
  };

  const getProgressToNextLevel = () => {
    const currentPoints = userStats.achievements.reduce((sum, a) => sum + (a.unlockedAt ? 100 : 0), 0) + 
                         userStats.totalScanned * 10 + 
                         userStats.routesCompleted * 50;
    
    const progress = ((currentPoints - userLevel.minPoints) / (userLevel.maxPoints - userLevel.minPoints)) * 100;
    return Math.min(progress, 100);
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const getCategoryIcon = (category: string) => {
    const icons: { [key: string]: string } = {
      'gastronomy': 'üçΩÔ∏è',
      'culture': 'üé≠',
      'attractions': 'üèõÔ∏è',
      'nature': 'üå≥',
      'architecture': 'üèóÔ∏è'
    };
    return icons[category] || 'üìç';
  };

  const subTabs = [
    { id: 'profile', name: '–ü—Ä–æ—Ñ–∏–ª—å', icon: 'üë§' },
    { id: 'collection', name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è', icon: 'üèÜ' },
    { id: 'quests', name: '–ö–≤–µ—Å—Ç—ã', icon: 'üéØ' },
    { id: 'leaderboard', name: '–†–µ–π—Ç–∏–Ω–≥', icon: 'üèÖ' },
    { id: 'settings', name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: '‚öôÔ∏è' }
  ];

  return (
    <div className="personal-cabinet">
      {/* Tabs */}
      <div className="cabinet-tabs">
        {subTabs.map(tab => (
          <button
            key={tab.id}
            className={`cabinet-tab ${activeSubTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveSubTab(tab.id as any)}
          >
            <span className="tab-icon">{tab.icon}</span>
            <span className="tab-name">{tab.name}</span>
          </button>
        ))}
      </div>

      {/* Content */}
      <div className="cabinet-content">
        {activeSubTab === 'profile' && (
          <div className="profile-section">
            {/* User Card */}
            <div className="user-card">
              <div className="user-avatar">
                <span className="avatar-icon" style={{ backgroundColor: userLevel.color }}>
                  {userLevel.badge}
                </span>
              </div>
              <div className="user-info">
                <h2 className="user-name">–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å #{getUserRank() || '?'}</h2>
                <p className="user-level">{userLevel.name} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {userLevel.level}</p>
                <div className="level-progress">
                  <div className="progress-bar">
                    <div 
                      className="progress-fill" 
                      style={{ 
                        width: `${getProgressToNextLevel()}%`,
                        backgroundColor: userLevel.color
                      }}
                    ></div>
                  </div>
                  <span className="progress-text">
                    {Math.round(getProgressToNextLevel())}% –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                  </span>
                </div>
              </div>
            </div>

            {/* Stats Grid */}
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-icon">üìç</div>
                <div className="stat-content">
                  <h3 className="stat-number">{userStats.totalScanned}</h3>
                  <p className="stat-label">–ú–µ—Å—Ç –ø–æ—Å–µ—â–µ–Ω–æ</p>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">üó∫Ô∏è</div>
                <div className="stat-content">
                  <h3 className="stat-number">{userStats.routesCompleted}</h3>
                  <p className="stat-label">–ú–∞—Ä—à—Ä—É—Ç–æ–≤</p>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">üö∂</div>
                <div className="stat-content">
                  <h3 className="stat-number">{userStats.distanceWalked.toFixed(1)} –∫–º</h3>
                  <p className="stat-label">–ü—Ä–æ–π–¥–µ–Ω–æ</p>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">üèÜ</div>
                <div className="stat-content">
                  <h3 className="stat-number">{userStats.achievements.filter(a => a.unlockedAt).length}</h3>
                  <p className="stat-label">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>
                </div>
              </div>
            </div>

            {/* Achievements */}
            <div className="section">
              <div 
                className="achievements-header"
                onClick={() => setAchievementsExpanded(!achievementsExpanded)}
              >
                <h3 className="section-title">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                <div className="achievements-summary">
                  <span className="achievements-count">
                    {userStats.achievements.filter(a => a.unlockedAt).length}/{userStats.achievements.length}
                  </span>
                  <button className="expand-btn">
                    {achievementsExpanded ? '‚ñ≤' : '‚ñº'}
                  </button>
                </div>
              </div>
              
              {achievementsExpanded && (
                <div className="achievements-dropdown">
                  <div className="achievements-grid">
                    {userStats.achievements.map(achievement => (
                      <div 
                        key={achievement.id} 
                        className={`achievement-card ${achievement.unlockedAt ? 'unlocked' : 'locked'}`}
                      >
                        <div className="achievement-icon">{achievement.icon}</div>
                        <div className="achievement-info">
                          <h4 className="achievement-name">{achievement.name}</h4>
                          <p className="achievement-desc">{achievement.description}</p>
                          {achievement.unlockedAt && (
                            <span className="achievement-date">
                              {formatDate(achievement.unlockedAt)}
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Coupons */}
            <div className="section">
              <h3 className="section-title">üé´ –ú–æ–∏ –∫—É–ø–æ–Ω—ã</h3>
              {userStats.coupons.length === 0 ? (
                <div className="empty-state">
                  <div className="empty-icon">üé´</div>
                  <h4>–ü–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–æ–Ω–æ–≤</h4>
                  <p>–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫–∏!</p>
                </div>
              ) : (
                <div className="coupons-grid">
                  {userStats.coupons.map(coupon => (
                    <div key={coupon.id} className="coupon-card">
                      <div className="coupon-discount">{coupon.discount}%</div>
                      <div className="coupon-content">
                        <h4 className="coupon-title">{coupon.businessName}</h4>
                        <p className="coupon-desc">{coupon.description}</p>
                        <span className="coupon-expires">
                          –î–æ {formatDate(coupon.validUntil)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {activeSubTab === 'collection' && (
          <div className="collection-section">
            {/* Collection Header */}
            <div className="collection-header">
              <div className="collection-stats">
                <div className="collection-stat">
                  <span className="stat-number">{collection.length}</span>
                  <span className="stat-label">–í—Å–µ–≥–æ –º–µ—Å—Ç</span>
                </div>
                <div className="collection-stat">
                  <span className="stat-number">{new Set(collection.map(c => c.category)).size}</span>
                  <span className="stat-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</span>
                </div>
              </div>
            </div>

            {/* Collection Grid */}
            {collection.length === 0 ? (
              <div className="empty-state">
                <div className="empty-icon">üèõÔ∏è</div>
                <h4>–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</h4>
                <p>–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!</p>
              </div>
            ) : (
              <div className="collection-grid">
                {collection.map(item => (
                  <div key={item.id} className="collection-item">
                    <div className="item-header">
                      <div className="item-icon">{getCategoryIcon(item.category)}</div>
                      <div className="item-date">{formatDate(item.scannedAt)}</div>
                    </div>
                    <div className="item-content">
                      <h4 className="item-name">{item.name}</h4>
                      <p className="item-category">{item.category}</p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'quests' && (
          <div className="quests-section">
            <div className="section">
              <h3 className="section-title">üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã</h3>
              {activeQuests.length === 0 ? (
                <div className="empty-state">
                  <div className="empty-icon">üéØ</div>
                  <h4>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤</h4>
                  <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –º–µ—Å—Ç–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π!</p>
                </div>
              ) : (
                <div className="quests-grid">
                  {activeQuests
                    .sort((a, b) => {
                      // –°–Ω–∞—á–∞–ª–∞ —Å—Ä–æ—á–Ω—ã–µ –∫–≤–µ—Å—Ç—ã (isPush –∏–ª–∏ urgency === 'high')
                      const aUrgent = a.isPush || a.urgency === 'high';
                      const bUrgent = b.isPush || b.urgency === 'high';
                      
                      if (aUrgent && !bUrgent) return -1;
                      if (!aUrgent && bUrgent) return 1;
                      
                      // –ó–∞—Ç–µ–º –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
                      const urgencyOrder = { 'high': 3, 'medium': 2, 'low': 1 };
                      const aUrgencyValue = urgencyOrder[a.urgency || 'low'];
                      const bUrgencyValue = urgencyOrder[b.urgency || 'low'];
                      
                      return bUrgencyValue - aUrgencyValue;
                    })
                    .map(quest => (
                    <div 
                      key={quest.id} 
                      className={`quest-card ${quest.isPush ? 'quest-push' : ''} ${quest.requiresGeolocation ? 'quest-geo' : ''}`}
                      data-urgency={quest.urgency}
                    >
                      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É—à-–∫–≤–µ—Å—Ç–µ */}
                      {quest.isPush && (
                        <div className="quest-notification">
                          <span className="notification-icon">üîî</span>
                          <span className="notification-text">–°—Ä–æ—á–Ω–æ!</span>
                        </div>
                      )}
                      
                      <div className="quest-header">
                        <div className="quest-icon">
                          {quest.type === 'visit' ? 'üèõÔ∏è' : 
                           quest.type === 'route' ? 'üó∫Ô∏è' : 
                           quest.type === 'route_with_geo' ? 'üß≠' :
                           quest.type === 'scan' ? 'üì±' : 'üë•'}
                        </div>
                        <div className="quest-reward">+{quest.rewards.points} –æ—á–∫–æ–≤</div>
                        {quest.urgency === 'high' && (
                          <div className="quest-urgency">‚ö°</div>
                        )}
                      </div>
                      
                      <div className="quest-content">
                        <h4 className="quest-title">{quest.title}</h4>
                        <p className="quest-desc">{quest.description}</p>
                        
                        <div className="quest-details">
                          <div className="quest-business">
                            <span>üè¢ {quest.businessName}</span>
                          </div>
                          
                          {quest.estimatedDuration && (
                            <div className="quest-duration">
                              <span>‚è±Ô∏è {Math.floor(quest.estimatedDuration / 60)}—á {quest.estimatedDuration % 60}–º–∏–Ω</span>
                            </div>
                          )}
                          
                          {quest.difficulty && (
                            <div className={`quest-difficulty difficulty-${quest.difficulty}`}>
                              {quest.difficulty === 'easy' ? 'üü¢ –õ–µ–≥–∫–æ' : 
                               quest.difficulty === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–µ' : 'üî¥ –°–ª–æ–∂–Ω–æ'}
                            </div>
                          )}
                          
                          {quest.requiresGeolocation && (
                            <div className="quest-geo-badge">
                              <span>üìç –¢—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è</span>
                            </div>
                          )}
                        </div>
                        
                        <div className="quest-reward-details">
                          {quest.rewards.badge && (
                            <div className="quest-badge-reward">
                              <span>üèÜ {quest.rewards.badge}</span>
                            </div>
                          )}
                          
                          {quest.rewards.coupon && (
                            <div className="quest-coupon-preview">
                              {quest.rewards.coupon.promoCode ? (
                                <span>üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {quest.rewards.coupon.description}</span>
                              ) : (
                                <span>üé´ –°–∫–∏–¥–∫–∞ {quest.rewards.coupon.discount}%</span>
                              )}
                            </div>
                          )}
                        </div>
                        
                        <div className="quest-actions">
                          <button className={`quest-btn ${quest.isPush ? 'btn-urgent' : 'btn-primary'}`}>
                            {quest.type === 'route_with_geo' ? '–ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç' : 
                             quest.isPush ? '–ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É' : '–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç'}
                          </button>
                          
                          <div className="quest-expires">
                            <span>‚è∞ –î–æ {formatDate(quest.validUntil)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            {/* –°–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ */}
            {completedQuests.length > 0 && (
              <div className="section">
                <h3 className="section-title">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã</h3>
                <div className="quests-grid">
                  {completedQuests.slice(0, 3).map(quest => (
                    <div key={quest.id} className="quest-card quest-completed">
                      <div className="quest-header">
                        <div className="quest-icon">‚úÖ</div>
                        <div className="quest-reward">+{quest.rewards.points} –æ—á–∫–æ–≤</div>
                      </div>
                      <div className="quest-content">
                        <h4 className="quest-title">{quest.title}</h4>
                        <div className="quest-business">
                          <span>üè¢ {quest.businessName}</span>
                        </div>
                        <div className="quest-status">
                          <span className="status-completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'leaderboard' && (
          <div className="leaderboard-section">
            <div className="section">
              <h3 className="section-title">üèÖ –†–µ–π—Ç–∏–Ω–≥ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π</h3>
              <div className="leaderboard-list">
                {leaderboard.map((entry, index) => (
                  <div 
                    key={entry.userId} 
                    className={`leaderboard-item ${entry.userId === userId ? 'current-user' : ''}`}
                  >
                    <div className="rank">
                      {index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `#${index + 1}`}
                    </div>
                    <div className="user-info">
                      <h4 className="username">{entry.username}</h4>
                      <p className="user-level">{entry.level.name}</p>
                    </div>
                    <div className="user-score">
                      <span className="score">{entry.points}</span>
                      <span className="score-label">–æ—á–∫–æ–≤</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeSubTab === 'settings' && (
          <div className="settings-section">
            <h3 className="section-title">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            
            {/* –¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
            <div className="settings-group">
              <h4 className="settings-group-title">üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h4>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</span>
                  <span className="setting-description">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ—Ç–ª—É—é –∏–ª–∏ —Ç–µ–º–Ω—É—é —Ç–µ–º—É</span>
                </div>
                <div className="theme-selector">
                  <button 
                    className={`theme-btn ${currentTheme === 'dark' ? 'active' : ''}`} 
                    onClick={() => handleThemeChange('dark')}
                  >
                    <span className="theme-icon">üåô</span>
                    <span className="theme-name">–¢–µ–º–Ω–∞—è</span>
                  </button>
                  <button 
                    className={`theme-btn ${currentTheme === 'light' ? 'active' : ''}`}
                    onClick={() => handleThemeChange('light')}
                  >
                    <span className="theme-icon">‚òÄÔ∏è</span>
                    <span className="theme-name">–°–≤–µ—Ç–ª–∞—è</span>
                  </button>
                </div>
              </div>
            </div>

            {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
            <div className="settings-group">
              <h4 className="settings-group-title">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–ü–∞—Ä–æ–ª—å</span>
                  <span className="setting-description">–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏</span>
                </div>
                <button className="setting-btn">
                  <span>–ò–∑–º–µ–Ω–∏—Ç—å</span>
                  <span className="btn-arrow">‚Üí</span>
                </button>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</span>
                  <span className="setting-description">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="two-factor" className="toggle-input" />
                  <label htmlFor="two-factor" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
            </div>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            <div className="settings-group">
              <h4 className="settings-group-title">üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  <span className="setting-description">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="push-notifications" className="toggle-input" defaultChecked />
                  <label htmlFor="push-notifications" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  <span className="setting-description">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="email-notifications" className="toggle-input" defaultChecked />
                  <label htmlFor="email-notifications" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
                  <span className="setting-description">–ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="sound-notifications" className="toggle-input" />
                  <label htmlFor="sound-notifications" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
            <div className="settings-group">
              <h4 className="settings-group-title">üõ°Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</h4>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</span>
                  <span className="setting-description">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="public-profile" className="toggle-input" defaultChecked />
                  <label htmlFor="public-profile" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è</span>
                  <span className="setting-description">–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="geolocation" className="toggle-input" defaultChecked />
                  <label htmlFor="geolocation" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                  <span className="setting-description">–ü–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</span>
                </div>
                <div className="toggle-switch">
                  <input type="checkbox" id="analytics" className="toggle-input" defaultChecked />
                  <label htmlFor="analytics" className="toggle-label">
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
            </div>

            {/* –î–∞–Ω–Ω—ã–µ */}
            <div className="settings-group">
              <h4 className="settings-group-title">üíæ –î–∞–Ω–Ω—ã–µ</h4>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                  <span className="setting-description">–°–∫–∞—á–∞—Ç—å –∫–æ–ø–∏—é –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</span>
                </div>
                <button className="setting-btn">
                  <span>–≠–∫—Å–ø–æ—Ä—Ç</span>
                  <span className="btn-arrow">‚Üì</span>
                </button>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à</span>
                  <span className="setting-description">–û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</span>
                </div>
                <button className="setting-btn secondary">
                  <span>–û—á–∏—Å—Ç–∏—Ç—å</span>
                  <span className="btn-arrow">üóëÔ∏è</span>
                </button>
              </div>
              <div className="setting-item danger">
                <div className="setting-info">
                  <span className="setting-label">–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</span>
                  <span className="setting-description">–ë–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</span>
                </div>
                <button className="setting-btn danger">
                  <span>–£–¥–∞–ª–∏—Ç—å</span>
                  <span className="btn-arrow">‚ö†Ô∏è</span>
                </button>
              </div>
            </div>

            {/* –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
            <div className="settings-group">
              <h4 className="settings-group-title">‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h4>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–í–µ—Ä—Å–∏—è</span>
                  <span className="setting-description">–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –°–∞—Ä–∞—Ç–æ–≤ v1.0.0</span>
                </div>
                <span className="version-badge">–ê–∫—Ç—É–∞–ª—å–Ω–∞—è</span>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</span>
                  <span className="setting-description">–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é</span>
                </div>
                <button className="setting-btn">
                  <span>–ù–∞–ø–∏—Å–∞—Ç—å</span>
                  <span className="btn-arrow">üìß</span>
                </button>
              </div>
              <div className="setting-item">
                <div className="setting-info">
                  <span className="setting-label">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</span>
                  <span className="setting-description">–ö–∞–∫ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</span>
                </div>
                <button className="setting-btn">
                  <span>–ß–∏—Ç–∞—Ç—å</span>
                  <span className="btn-arrow">‚Üí</span>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PersonalCabinet;