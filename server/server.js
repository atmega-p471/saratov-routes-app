const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'saratov.db');
const db = new sqlite3.Database(dbPath);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
  // –¢–∞–±–ª–∏—Ü–∞ –º–µ—Å—Ç
  db.run(`
    CREATE TABLE IF NOT EXISTS places (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT NOT NULL,
      latitude REAL NOT NULL,
      longitude REAL NOT NULL,
      category TEXT NOT NULL,
      tags TEXT NOT NULL,
      rating REAL DEFAULT 0,
      photos TEXT,
      business_name TEXT,
      business_phone TEXT,
      business_website TEXT,
      business_hours TEXT,
      is_premium BOOLEAN DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–≥–æ–≤
  db.run(`
    CREATE TABLE IF NOT EXISTS tags (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      category TEXT NOT NULL,
      icon TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id TEXT PRIMARY KEY,
      total_scanned INTEGER DEFAULT 0,
      routes_completed INTEGER DEFAULT 0,
      distance_walked REAL DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  db.run(`
    CREATE TABLE IF NOT EXISTS user_collections (
      id TEXT PRIMARY KEY,
      user_id TEXT,
      place_id TEXT,
      scanned_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (place_id) REFERENCES places (id)
    )
  `);
});

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Å—Ç–∞
app.get('/api/places', (req, res) => {
  const { category, tags } = req.query;
  
  let query = 'SELECT * FROM places';
  let params = [];
  
  if (category) {
    query += ' WHERE category = ?';
    params.push(category);
  }
  
  if (tags) {
    const tagList = tags.split(',');
    const tagConditions = tagList.map(() => 'tags LIKE ?').join(' OR ');
    query += category ? ' AND (' + tagConditions + ')' : ' WHERE (' + tagConditions + ')';
    tagList.forEach(tag => params.push(`%${tag}%`));
  }
  
  query += ' ORDER BY rating DESC';
  
  db.all(query, params, (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    const places = rows.map(row => ({
      id: row.id,
      name: row.name,
      description: row.description,
      coordinates: [row.latitude, row.longitude],
      category: row.category,
      tags: JSON.parse(row.tags || '[]'),
      rating: row.rating,
      photos: JSON.parse(row.photos || '[]'),
      businessInfo: {
        name: row.business_name,
        phone: row.business_phone,
        website: row.business_website,
        workingHours: row.business_hours,
        isPremium: Boolean(row.is_premium)
      }
    }));
    
    res.json(places);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏
app.get('/api/tags', (req, res) => {
  db.all('SELECT * FROM tags ORDER BY category, name', (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ
app.post('/api/places', (req, res) => {
  const {
    id, name, description, coordinates, category, tags, rating,
    photos, businessInfo
  } = req.body;

  const query = `
    INSERT INTO places (
      id, name, description, latitude, longitude, category, tags, rating,
      photos, business_name, business_phone, business_website, 
      business_hours, is_premium
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;

  const params = [
    id, name, description, coordinates[0], coordinates[1], category,
    JSON.stringify(tags), rating || 0, JSON.stringify(photos || []),
    businessInfo?.name, businessInfo?.phone, businessInfo?.website,
    businessInfo?.workingHours, businessInfo?.isPremium ? 1 : 0
  ];

  db.run(query, params, function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ id: this.lastID, success: true });
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ
app.put('/api/places/:id', (req, res) => {
  const { id } = req.params;
  const {
    name, description, coordinates, category, tags, rating,
    photos, businessInfo
  } = req.body;

  const query = `
    UPDATE places SET
      name = ?, description = ?, latitude = ?, longitude = ?, category = ?,
      tags = ?, rating = ?, photos = ?, business_name = ?, business_phone = ?,
      business_website = ?, business_hours = ?, is_premium = ?
    WHERE id = ?
  `;

  const params = [
    name, description, coordinates[0], coordinates[1], category,
    JSON.stringify(tags), rating, JSON.stringify(photos || []),
    businessInfo?.name, businessInfo?.phone, businessInfo?.website,
    businessInfo?.workingHours, businessInfo?.isPremium ? 1 : 0, id
  ];

  db.run(query, params, function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ changes: this.changes, success: true });
  });
});

// –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ
app.delete('/api/places/:id', (req, res) => {
  const { id } = req.params;
  
  db.run('DELETE FROM places WHERE id = ?', [id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ changes: this.changes, success: true });
  });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/users/:userId/stats', (req, res) => {
  const { userId } = req.params;
  
  db.get('SELECT * FROM users WHERE id = ?', [userId], (err, user) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    if (!user) {
      res.status(404).json({ error: 'User not found' });
      return;
    }
    
    res.json({
      totalScanned: user.total_scanned,
      routesCompleted: user.routes_completed,
      distanceWalked: user.distance_walked
    });
  });
});

// –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users/:userId/stats', (req, res) => {
  const { userId } = req.params;
  const { totalScanned, routesCompleted, distanceWalked } = req.body;
  
  const query = `
    INSERT OR REPLACE INTO users (id, total_scanned, routes_completed, distance_walked, updated_at)
    VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
  `;
  
  db.run(query, [userId, totalScanned, routesCompleted, distanceWalked], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ success: true });
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
const initializeData = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
  db.get('SELECT COUNT(*) as count FROM places', (err, result) => {
    if (err || result.count > 0) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
    const tagsData = [
      { id: 'gagarin', name: '–ì–∞–≥–∞—Ä–∏–Ω', category: 'personalities', icon: 'üöÄ' },
      { id: 'tabakov', name: '–¢–∞–±–∞–∫–æ–≤', category: 'personalities', icon: 'üé≠' },
      { id: 'yankovsky', name: '–Ø–Ω–∫–æ–≤—Å–∫–∏–π', category: 'personalities', icon: 'üé¨' },
      { id: 'chernyshevsky', name: '–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∏–π', category: 'personalities', icon: 'üìö' },
      { id: 'architecture', name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (–º–æ–¥–µ—Ä–Ω)', category: 'themes', icon: 'üèõÔ∏è' },
      { id: 'gastronomy', name: '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', category: 'themes', icon: 'üçΩÔ∏è' },
      { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', category: 'themes', icon: 'üé®' },
      { id: 'space', name: '–ö–æ—Å–º–æ—Å', category: 'themes', icon: 'üåå' },
      { id: 'volga', name: '–ü—Ä–æ–≥—É–ª–∫–∏ —É –í–æ–ª–≥–∏', category: 'themes', icon: 'üåä' },
      { id: 'active', name: '–ê–∫—Ç–∏–≤–Ω—ã–π', category: 'formats', icon: 'üèÉ' },
      { id: 'leisurely', name: '–ù–µ—Å–ø–µ—à–Ω—ã–π', category: 'formats', icon: 'üö∂' },
      { id: 'children', name: '–î–ª—è –¥–µ—Ç–µ–π', category: 'formats', icon: 'üë∂' }
    ];
    
    tagsData.forEach(tag => {
      db.run('INSERT INTO tags (id, name, category, icon) VALUES (?, ?, ?, ?)',
        [tag.id, tag.name, tag.category, tag.icon]);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞
    const placesData = [
      {
        id: 'gagarin-park',
        name: '–ü–∞—Ä–∫ –∏–º–µ–Ω–∏ –ì–∞–≥–∞—Ä–∏–Ω–∞',
        description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ –°–∞—Ä–∞—Ç–æ–≤–∞ —Å –ø–∞–º—è—Ç–Ω–∏–∫–æ–º –ø–µ—Ä–≤–æ–º—É –∫–æ—Å–º–æ–Ω–∞–≤—Ç—É',
        latitude: 51.533562,
        longitude: 46.034266,
        category: 'attractions',
        tags: ['gagarin', 'space', 'children', 'leisurely'],
        rating: 4.5,
        business_name: '–ü–∞—Ä–∫ –∏–º–µ–Ω–∏ –ì–∞–≥–∞—Ä–∏–Ω–∞',
        business_hours: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ',
        is_premium: 0
      },
      {
        id: 'conservatory',
        name: '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è',
        description: '–°—Ç–∞—Ä–µ–π—à–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 1912 –≥–æ–¥—É',
        latitude: 51.533901,
        longitude: 46.008034,
        category: 'culture',
        tags: ['art', 'architecture', 'leisurely'],
        rating: 4.8,
        business_name: '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è',
        business_phone: '+7 (8452) 26-66-09',
        business_website: 'https://sarcons.ru',
        business_hours: '9:00-18:00',
        is_premium: 1
      },
      {
        id: 'drama-theater',
        name: '–¢–µ–∞—Ç—Ä –¥—Ä–∞–º—ã –∏–º–µ–Ω–∏ –°–ª–æ–Ω–æ–≤–∞',
        description: '–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∞—Ç—Ä –¥—Ä–∞–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∏–º–µ–Ω–∞–º–∏ –¢–∞–±–∞–∫–æ–≤–∞ –∏ –Ø–Ω–∫–æ–≤—Å–∫–æ–≥–æ',
        latitude: 51.531845,
        longitude: 46.005234,
        category: 'culture',
        tags: ['tabakov', 'yankovsky', 'art', 'leisurely'],
        rating: 4.7,
        business_name: '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∏–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∞—Ç—Ä –¥—Ä–∞–º—ã',
        business_phone: '+7 (8452) 26-64-87',
        business_website: 'https://teatr-slonova.ru',
        business_hours: '–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π',
        is_premium: 1
      },
      {
        id: 'volga-embankment',
        name: '–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –í–æ–ª–≥–∏',
        description: '–ñ–∏–≤–æ–ø–∏—Å–Ω–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è —Å –≤–∏–¥–∞–º–∏ –Ω–∞ –≤–µ–ª–∏–∫—É—é —Ä—É—Å—Å–∫—É—é —Ä–µ–∫—É',
        latitude: 51.533456,
        longitude: 46.042567,
        category: 'nature',
        tags: ['volga', 'active', 'leisurely', 'children'],
        rating: 4.6,
        business_name: '–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –í–æ–ª–≥–∏',
        business_hours: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ',
        is_premium: 0
      },
      {
        id: 'restaurant-pushkin',
        name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ü—É—à–∫–∏–Ω—ä"',
        description: '–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –∫—É—Ö–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ',
        latitude: 51.532567,
        longitude: 46.008901,
        category: 'gastronomy',
        tags: ['gastronomy', 'architecture', 'leisurely'],
        rating: 4.4,
        business_name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ü—É—à–∫–∏–Ω—ä"',
        business_phone: '+7 (8452) 75-75-75',
        business_website: 'https://pushkin-saratov.ru',
        business_hours: '12:00-24:00',
        is_premium: 1
      }
    ];
    
    placesData.forEach(place => {
      const query = `
        INSERT INTO places (
          id, name, description, latitude, longitude, category, tags, rating,
          business_name, business_phone, business_website, business_hours, is_premium
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;
      
      db.run(query, [
        place.id, place.name, place.description, place.latitude, place.longitude,
        place.category, JSON.stringify(place.tags), place.rating,
        place.business_name, place.business_phone, place.business_website,
        place.business_hours, place.is_premium
      ]);
    });
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  });
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  initializeData();
});

// Graceful shutdown
process.on('SIGINT', () => {
  db.close((err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
    } else {
      console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞.');
    }
    process.exit(0);
  });
});
